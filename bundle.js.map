{
  "version": 3,
  "sources": ["../src/index.tsx", "../src/BirdDashboard.tsx", "../src/types/types.tsx", "../src/utils/useBirdData.ts", "../src/utils/birdUtils.ts", "../src/components/BirdCard.tsx", "../src/components/BirdCard.module.css", "../src/components/ExpandedImage.tsx", "../src/utils/ExpandedImageUtils.tsx", "../src/components/Skeleton.tsx", "../src/BirdDashboard.module.css"],
  "sourcesContent": ["// src/Index.tsx\nimport React, { FC } from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { HashRouter, Route, Routes } from \"react-router-dom\";\n\nimport BirdDashboard from \"./BirdDashboard.tsx\";\n\nconst NotFound: FC = () => (\n  <main style={{ padding: \"1rem\" }}>\n    <h1>404 Not Found</h1>\n    <p>The page you're looking for does not exist.</p>\n  </main>\n);\n\nconst App: FC = () => (\n  <Routes>\n    <Route path=\"/\" element={<BirdDashboard />} />\n    <Route path=\"*\" element={<NotFound />} />\n  </Routes>\n);\n\nconst rootElement = document.getElementById(\"root\");\nif (!rootElement) {\n  throw new Error(\n    \"Root element not found. Please ensure there is an element with id 'root'.\",\n  );\n}\n\nconst root = ReactDOM.createRoot(rootElement);\n\nroot.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n);\n", "// src\\BirdDashboard.tsx\nimport React, { useCallback, useState } from \"react\";\nimport {\n  BirdFamily,\n  BirdSpecies,\n  ExpandedSpeciesState,\n  INITIAL_EXPANDED_STATE,\n} from \"./types/types.tsx\";\nimport { getTrackerTitle, useBirdData } from \"./utils/index.tsx\";\nimport {\n  ExpandedImage,\n  FamilyCard,\n  FamilySkeleton,\n  SpeciesCard,\n  SpeciesSkeleton,\n} from \"./components/index.tsx\";\nimport styles from \"./BirdDashboard.module.css\";\n\nconst BirdDashboard: React.FC = () => {\n  // Retrieve bird data from the custom hook\n  const { families, totalBirds, spottedBirds } = useBirdData();\n\n  // Determine a loading state based on the data provided by the hook\n  const isLoading = families.length === 0 && totalBirds === 0 &&\n    spottedBirds === 0;\n\n  // Expanded species state (using a shared type so ExpandedImage can consume it)\n  const [expandedSpecies, setExpandedSpecies] = useState<ExpandedSpeciesState>(\n    INITIAL_EXPANDED_STATE,\n  );\n\n  // Handler for when a card is clicked. It figures out the index within the spotted species list.\n  const handleCardClick = useCallback(\n    (species: BirdSpecies, familyName: string) => {\n      const allSpotted = families.flatMap((f) =>\n        f.species.filter((s) => s.spotted)\n      );\n      const currentIndex = allSpotted.findIndex((s) =>\n        s.index === species.index\n      );\n      setExpandedSpecies({\n        species,\n        family: familyName,\n        allSpotted,\n        currentIndex,\n      });\n    },\n    [families],\n  );\n\n  // Navigation handler for the expanded image view\n  const handleNavigation = useCallback((direction: \"prev\" | \"next\") => {\n    setExpandedSpecies((prev) => {\n      const newIndex = direction === \"prev\"\n        ? prev.currentIndex - 1\n        : prev.currentIndex + 1;\n      if (newIndex < 0 || newIndex >= prev.allSpotted.length) return prev;\n\n      const species = prev.allSpotted[newIndex];\n      const family = families.find((f) =>\n        f.species.some((s) => s.index === species.index)\n      )?.family || \"\";\n\n      return { ...prev, species, family, currentIndex: newIndex };\n    });\n  }, [families]);\n\n  const handleClose = useCallback(\n    () => setExpandedSpecies(INITIAL_EXPANDED_STATE),\n    [],\n  );\n  const handlePrev = useCallback(() => handleNavigation(\"prev\"), [\n    handleNavigation,\n  ]);\n  const handleNext = useCallback(() => handleNavigation(\"next\"), [\n    handleNavigation,\n  ]);\n\n  // Render each family section, which includes the FamilyCard and its SpeciesCards\n  const renderFamilySection = useCallback(\n    (family: BirdFamily) => (\n      <React.Fragment key={family.family}>\n        <FamilyCard\n          family={family}\n          onImageClick={() => handleCardClick(family.species[0], family.family)}\n        />\n        {family.species.map((species) => (\n          <SpeciesCard\n            key={species.index}\n            species={species}\n            onImageClick={() => handleCardClick(species, family.family)}\n          />\n        ))}\n      </React.Fragment>\n    ),\n    [handleCardClick],\n  );\n\n  // If still loading, show skeleton loaders.\n  if (isLoading) {\n    return (\n      <div className={styles.birdContainer}>\n        <h1 className={styles.birdTrackerTitle}>Loading...</h1>\n        <div className={styles.speciesGrid}>\n          {Array.from({ length: 3 }).map((_, familyIndex) => (\n            <React.Fragment key={familyIndex}>\n              <FamilySkeleton />\n              {Array.from({ length: 3 }).map((_, speciesIndex) => (\n                <SpeciesSkeleton key={speciesIndex} />\n              ))}\n            </React.Fragment>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.birdContainer}>\n      <h1 className={styles.birdTrackerTitle}>\n        {getTrackerTitle(spottedBirds, totalBirds)}\n      </h1>\n      <div className={styles.speciesGrid}>\n        {families.map(renderFamilySection)}\n      </div>\n      {expandedSpecies.species && (\n        <ExpandedImage\n          {...expandedSpecies}\n          onClose={handleClose}\n          onPrev={handlePrev}\n          onNext={handleNext}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default React.memo(BirdDashboard);\n", "// src/types/types.tsx\n\nexport interface BirdSpecies {\n  index: number;\n  name: string;\n  spotted: boolean;\n  spottedDate?: string;\n}\n\nexport type BirdFamily = {\n  family: string;\n  species: BirdSpecies[];\n};\n\nexport interface BirdCardProps {\n  imagePath: string;\n  fallbackPath: string;\n  index: number;\n  name: string;\n  isClickable: boolean;\n  onImageClick: (imagePath: string) => void;\n}\n\nexport interface ExpandedSpeciesState {\n  species: BirdSpecies | null;\n  family: string | null;\n  allSpotted: BirdSpecies[];\n  currentIndex: number;\n}\n\nexport const INITIAL_EXPANDED_STATE: ExpandedSpeciesState = {\n  species: null,\n  family: null,\n  allSpotted: [],\n  currentIndex: -1,\n};\n", "// src\\utils\\useBirdData.ts\nimport { useEffect, useState } from \"react\";\nimport { BirdFamily, BirdSpecies } from \"../types/types.tsx\";\nimport { calculateTotalBirds, parseBirdData } from \"./birdUtils.ts\";\n\nconst useBirdData = () => {\n  const [families, setFamilies] = useState<BirdFamily[]>([]);\n  const [totalBirds, setTotalBirds] = useState(0);\n  const [spottedBirds, setSpottedBirds] = useState(0);\n\n  useEffect(() => {\n    const loadBirdData = async () => {\n      try {\n        const response = await fetch(`./birds.txt`);\n        const textData = await response.text();\n        const parsedFamilies = parseBirdData(textData);\n\n        // Add type annotation to the filter callback parameter\n        const allSpotted = parsedFamilies.flatMap((f) =>\n          f.species.filter((s: BirdSpecies) => s.spotted)\n        );\n\n        setFamilies(parsedFamilies);\n        setTotalBirds(calculateTotalBirds(parsedFamilies));\n        setSpottedBirds(allSpotted.length);\n      } catch (error) {\n        console.error(\"Error loading bird data:\", error);\n      }\n    };\n\n    loadBirdData();\n  }, []);\n\n  return { families, totalBirds, spottedBirds };\n};\n\nexport default useBirdData;\n", "// src\\utils\\birdUtils.ts\n\nimport { BirdFamily } from \"../types/types.tsx\";\n\nexport const calculateTotalBirds = (families: BirdFamily[]): number => {\n  return families.reduce((acc, family) => acc + family.species.length, 0);\n};\n\nexport const getTrackerTitle = (spotted: number, total: number): string => {\n  return `Bird Tracker ${spotted}/${total}`;\n};\n\nexport const parseBirdData = (text: string): BirdFamily[] => {\n  const lines = text.split(\"\\n\");\n  const families: BirdFamily[] = [];\n  let currentFamily: BirdFamily | null = null;\n\n  lines.forEach((line) => {\n    const trimmed = line.trim();\n    if (!trimmed) return;\n\n    // Check if the line is a species line.\n    const speciesMatch = trimmed.match(\n      /^(\\d+)\\s+([^,]+)(?:,(\\d{4}-\\d{2}-\\d{2}))?/,\n    );\n    if (speciesMatch) {\n      if (currentFamily) {\n        const spotted = !!speciesMatch[3];\n        currentFamily.species.push({\n          index: parseInt(speciesMatch[1]),\n          name: speciesMatch[2].trim(),\n          spotted,\n          spottedDate: speciesMatch[3] || undefined,\n        });\n      }\n      return;\n    }\n\n    // If the line is not a species line, it might be a family header.\n    // Only create a new family header if:\n    // 1. There is no current family, or\n    // 2. The current family already has at least one species.\n    // Otherwise, skip the line (malformed or misplaced).\n    if (!currentFamily || (currentFamily && currentFamily.species.length > 0)) {\n      currentFamily = { family: trimmed, species: [] };\n      families.push(currentFamily);\n    }\n  });\n\n  return families;\n};\n", "// src/components/BirdCard.tsx\nimport React from \"react\";\nimport styles from \"./BirdCard.module.css\";\nimport { BirdCardProps, BirdFamily, BirdSpecies } from \"../types/types.tsx\";\n\nexport const BirdCard = React.memo(({\n  imagePath,\n  fallbackPath,\n  index,\n  name,\n  isClickable,\n  onImageClick,\n}: BirdCardProps) => {\n  return (\n    <div\n      className={styles.birdCard}\n      onClick={isClickable ? () => onImageClick(imagePath) : undefined}\n      style={{\n        backgroundImage: `url(${imagePath}), url(${fallbackPath})`,\n        cursor: isClickable ? \"pointer\" : \"default\",\n      }}\n    >\n      <div className={styles.birdIndex}>\n        #{index.toString().padStart(3, \"0\")}\n      </div>\n      <div className={styles.birdNameContainer}>\n        <p className={styles.birdName}>\n          {name}\n        </p>\n      </div>\n    </div>\n  );\n});\n\ninterface FamilyCardProps {\n  family: BirdFamily;\n  onImageClick: (imagePath: string) => void;\n}\n\nexport const FamilyCard = React.memo(\n  ({ family, onImageClick }: FamilyCardProps) => {\n    const spottedSpecies = family.species.filter((s) => s.spotted);\n\n    return (\n      <div className={styles.familyCardWrapper}>\n        <BirdCard\n          imagePath=\"\" // No image for the family card itself\n          fallbackPath=\"\"\n          index={0}\n          name={family.family}\n          isClickable={spottedSpecies.length > 0}\n          onImageClick={onImageClick}\n        />\n      </div>\n    );\n  },\n);\n\ninterface SpeciesCardProps {\n  species: BirdSpecies;\n  onImageClick: (imagePath: string) => void;\n}\n\nexport const SpeciesCard = React.memo(\n  ({ species, onImageClick }: SpeciesCardProps) => {\n    const imagePath = species.spotted\n      ? `./pictures/${species.index}.png`\n      : `./placeholder_bird.png`;\n    const fallbackPath = `./placeholder_bird.png`;\n\n    return (\n      <BirdCard\n        imagePath={imagePath}\n        fallbackPath={fallbackPath}\n        index={species.index}\n        name={species.name}\n        isClickable={species.spotted}\n        onImageClick={onImageClick}\n      />\n    );\n  },\n);\n", "/* src/components/BirdCard.module.css */\n.birdCard {\n  position: relative;\n  aspect-ratio: 1;\n  border-radius: 1rem;\n  overflow: hidden;\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  cursor: pointer;\n  background-color: white;\n  transition: transform 0.2s, box-shadow 0.2s;\n  --base-font: Arial, sans-serif;\n}\n\n.birdCard:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);\n}\n\n.birdIndex {\n  position: absolute;\n  top: 1rem;\n  left: 1rem;\n  font-weight: 700;\n  background: rgba(0, 0, 0, 0.7);\n  padding: 0.3rem 0.6rem;\n  border-radius: 0.5rem;\n  color: white;\n  transition: transform 0.3s ease;\n  --base-font: Arial, sans-serif;\n}\n\n.birdNameContainer {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding: 1rem;\n  background: linear-gradient(to top, rgba(0, 0, 0, 0.7), transparent);\n  transition: all 0.3s ease;\n}\n\n.birdName {\n  font-family: Arial, sans-serif;\n  color: white;\n  font-size: 1.1rem;\n  font-weight: 600;\n  text-align: center;\n  padding: 0.5rem;\n  margin: 0;\n  transition: transform 0.3s ease;\n}\n\n.birdCard:hover .birdNameContainer {\n  background: transparent;\n}\n\n.birdCard:hover .birdIndex {\n  transform: translateY(-200%);\n}\n\n.birdCard:hover .birdName {\n  transform: translateY(200%);\n}\n\n.familyCardWrapper {\n  border: 4px solid darkgray;\n  border-radius: 1rem;\n  overflow: hidden;\n\n  background-color: white;\n}\n\n.familyCardWrapper:hover {\n  background-color: darkgray;\n}\n\n.familyCardWrapper .birdCard {\n  background-color: transparent !important;\n  transition: none;\n}\n\n.familyCardWrapper .birdIndex {\n  display: none;\n}\n\n.familyCardWrapper .birdNameContainer {\n  bottom: auto;\n  top: 0;\n  background: transparent;\n  padding: 1rem;\n}\n\n.familyCardWrapper .birdName {\n  color: darkgray;\n  font-size: 1.5rem;\n  text-align: center;\n  margin: 0;\n}\n\n.familyCardWrapper:hover .birdName {\n  color: white;\n}\n\n.familyCardWrapper:hover .birdNameContainer {\n  top: 50%;\n  transform: translateY(-170%);\n}\n\n.skeleton {\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n  background-size: 200% 100%;\n  animation: shimmer 1.5s infinite linear;\n  border-radius: 8px;\n}\n\n.skeletonText {\n  height: 16px;\n  margin: 8px 0;\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: -200% 0;\n  }\n  100% {\n    background-position: 200% 0;\n  }\n}\n", "/// <reference lib=\"dom\" />\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { ExpandedSpeciesState } from \"../types/types.tsx\";\nimport {\n  CloseButton,\n  NavigationArrows,\n  ZoomControls,\n} from \"../utils/ExpandedImageUtils.tsx\";\nimport \"./ExpandedImage.css\";\n\nconst MIN_SCALE = 0.5;\nconst MAX_SCALE = 3;\nconst SCALE_STEP = 0.1;\n\ninterface ExpandedImageProps extends ExpandedSpeciesState {\n  onClose: () => void;\n  onPrev: () => void;\n  onNext: () => void;\n}\n\nconst ExpandedImage: React.FC<ExpandedImageProps> = React.memo(\n  ({ species, family, allSpotted, currentIndex, onClose, onPrev, onNext }) => {\n    const [scale, setScale] = useState(1);\n    const imageUrl = species?.spotted\n      ? `./pictures/${species.index}.png`\n      : null;\n\n    // Zoom handlers\n    const zoomIn = useCallback(() => {\n      setScale((s) => Math.min(s + SCALE_STEP, MAX_SCALE));\n    }, []);\n\n    const zoomOut = useCallback(() => {\n      setScale((s) => Math.max(s - SCALE_STEP, MIN_SCALE));\n    }, []);\n\n    useEffect(() => {\n      if (!imageUrl) return;\n\n      const handleKeyDown = (e: KeyboardEvent) => {\n        switch (e.key) {\n          case \"ArrowLeft\":\n            onPrev();\n            break;\n          case \"ArrowRight\":\n            onNext();\n            break;\n          case \"Escape\":\n            onClose();\n            break;\n          case \"+\":\n            zoomIn();\n            break;\n          case \"-\":\n            zoomOut();\n            break;\n          default:\n            break;\n        }\n      };\n\n      const handleWheel = (e: WheelEvent) => {\n        e.preventDefault();\n        setScale((prev) =>\n          Math.min(Math.max(MIN_SCALE, prev + e.deltaY * -0.01), MAX_SCALE)\n        );\n      };\n\n      globalThis.addEventListener(\"keydown\", handleKeyDown);\n      globalThis.addEventListener(\"wheel\", handleWheel, { passive: false });\n\n      return () => {\n        globalThis.removeEventListener(\"keydown\", handleKeyDown);\n        globalThis.removeEventListener(\"wheel\", handleWheel);\n      };\n    }, [imageUrl, onClose, onPrev, onNext, zoomIn, zoomOut]);\n\n    if (!imageUrl) return null;\n\n    return (\n      <div className=\"expanded-image-overlay\" onClick={onClose}>\n        <div className=\"expanded-image-header\">\n          <div className=\"expanded-image-info\">\n            <div className=\"species-name\">{species?.name}</div>\n            <div className=\"family-name\">{family}</div>\n          </div>\n          <CloseButton onClick={onClose} />\n        </div>\n\n        <NavigationArrows\n          onPrev={onPrev}\n          onNext={onNext}\n          showPrev={currentIndex > 0}\n          showNext={currentIndex < allSpotted.length - 1}\n        />\n\n        <div className=\"image-container\">\n          <img\n            src={imageUrl}\n            alt={`Expanded view of ${species?.name}`}\n            className=\"expanded-image\"\n            style={{ transform: `scale(${scale})` }}\n            onClick={(e) => e.stopPropagation()}\n          />\n        </div>\n\n        <ZoomControls scale={scale} setScale={setScale} />\n      </div>\n    );\n  },\n);\n\nexport default ExpandedImage;\n", "// src\\utils\\ExpandedImageUtils.tsx\n\nimport React from \"react\";\n\ninterface NavigationArrowsProps {\n  onPrev: () => void;\n  onNext: () => void;\n  showPrev: boolean;\n  showNext: boolean;\n}\n\nexport const NavigationArrows: React.FC<NavigationArrowsProps> = ({\n  onPrev,\n  onNext,\n  showPrev,\n  showNext,\n}) => {\n  return (\n    <div className=\"navigation-arrows\">\n      {showPrev\n        ? (\n          <button\n            className=\"arrow prev\"\n            onClick={onPrev}\n            aria-label=\"Previous Image\"\n          >\n            &#8249;\n          </button>\n        )\n        : (\n          // Invisible placeholder to maintain layout\n          <div className=\"arrow placeholder\" />\n        )}\n      {showNext\n        ? (\n          <button\n            className=\"arrow next\"\n            onClick={onNext}\n            aria-label=\"Next Image\"\n          >\n            &#8250;\n          </button>\n        )\n        : <div className=\"arrow placeholder\" />}\n    </div>\n  );\n};\n\nexport const CloseButton: React.FC<{ onClick: () => void }> = ({ onClick }) => (\n  <button className=\"close-button\" onClick={onClick} aria-label=\"Close\">\n    &times;\n  </button>\n);\n\nexport const ZoomControls: React.FC<{\n  scale: number;\n  setScale: React.Dispatch<React.SetStateAction<number>>;\n}> = ({ scale, setScale }) => {\n  const zoomIn = () => setScale((s) => Math.min(s + 0.1, 3));\n  const zoomOut = () => setScale((s) => Math.max(s - 0.1, 0.5));\n\n  return (\n    <div className=\"zoom-controls\">\n      <button onClick={zoomOut} aria-label=\"Zoom Out\">-</button>\n      <span>{(scale * 100).toFixed(0)}%</span>\n      <button onClick={zoomIn} aria-label=\"Zoom In\">+</button>\n    </div>\n  );\n};\n", "// src/components/Skeleton.tsx\nimport React from \"react\";\nimport styles from \"./BirdCard.module.css\";\n\nexport const FamilySkeleton = () => (\n  <div className={styles.familyCard}>\n    <div className={`${styles.imageContainer} ${styles.skeleton}`} />\n    <div className={styles.familyInfo}>\n      <div className={`${styles.skeletonText} ${styles.skeleton}`} />\n      <div className={`${styles.skeletonText} ${styles.skeleton}`} />\n    </div>\n  </div>\n);\n\nexport const SpeciesSkeleton = () => (\n  <div className={styles.speciesCard}>\n    <div className={`${styles.imageContainer} ${styles.skeleton}`} />\n    <div className={styles.speciesInfo}>\n      <div className={`${styles.skeletonText} ${styles.skeleton}`} />\n      <div className={`${styles.skeletonText} ${styles.skeleton}`} />\n    </div>\n  </div>\n);\n", "/*src\\BirdDashboard.module.css*/\n:root {\n  --primary-text-color: #4a5568;\n  --overlay-bg: rgba(0, 0, 0, 0.7);\n  --base-font: Arial, sans-serif;\n  --transition-timing: 0.2s;\n  --z-index-overlay: 1000;\n  --z-index-overlay-content: 1001;\n}\n\nbody {\n  background-color: rgba(0, 0, 0, 0.10);\n}\n\n.birdContainer {\n  display: flex;\n  flex-direction: column;\n  gap: 3rem;\n  padding: 2rem;\n  max-width: 1400px;\n  margin: 0 auto;\n}\n\n.birdTrackerTitle,\n.familyTitle {\n  font-family: var(--base-font);\n  font-weight: 700;\n  color: var(--primary-text-color);\n  text-align: center;\n}\n\n.birdTrackerTitle {\n  font-size: 2.5rem;\n  margin-bottom: 2rem;\n}\n\n.familyTitle {\n  font-size: 2rem;\n  border: 2px solid var(--primary-text-color);\n  border-radius: 1rem;\n  padding: 0.5rem;\n  margin: 0 0 0 0 rem;\n  position: relative;\n  overflow: hidden;\n  aspect-ratio: 1;\n  transition:\n    transform var(--transition-timing),\n    box-shadow var(--transition-timing);\n  background-color: white;\n}\n\n.speciesGrid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 1.5rem;\n  align-items: center;\n}\n"],
  "mappings": "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",
  "names": ["React", "ReactDOM", "HashRouter", "Route", "Routes", "React", "useCallback", "useState", "INITIAL_EXPANDED_STATE", "useEffect", "useState", "calculateTotalBirds", "families", "acc", "family", "getTrackerTitle", "spotted", "total", "parseBirdData", "text", "lines", "currentFamily", "line", "trimmed", "speciesMatch", "useBirdData", "families", "setFamilies", "useState", "totalBirds", "setTotalBirds", "spottedBirds", "setSpottedBirds", "useEffect", "textData", "parsedFamilies", "parseBirdData", "allSpotted", "f", "s", "calculateTotalBirds", "error", "useBirdData_default", "React", "BirdCard_default", "birdCard", "birdIndex", "birdNameContainer", "birdName", "familyCardWrapper", "skeleton", "shimmer", "skeletonText", "BirdCard", "React", "imagePath", "fallbackPath", "index", "name", "isClickable", "onImageClick", "BirdCard_default", "FamilyCard", "family", "spottedSpecies", "s", "SpeciesCard", "species", "React", "useCallback", "useEffect", "useState", "React", "NavigationArrows", "onPrev", "onNext", "showPrev", "showNext", "CloseButton", "onClick", "ZoomControls", "scale", "setScale", "zoomIn", "s", "MIN_SCALE", "MAX_SCALE", "SCALE_STEP", "ExpandedImage", "React", "species", "family", "allSpotted", "currentIndex", "onClose", "onPrev", "onNext", "scale", "setScale", "useState", "imageUrl", "zoomIn", "useCallback", "s", "zoomOut", "useEffect", "handleKeyDown", "e", "handleWheel", "prev", "CloseButton", "NavigationArrows", "ZoomControls", "ExpandedImage_default", "React", "FamilySkeleton", "React", "BirdCard_default", "SpeciesSkeleton", "BirdDashboard_default", "birdContainer", "birdTrackerTitle", "familyTitle", "speciesGrid", "BirdDashboard", "families", "totalBirds", "spottedBirds", "useBirdData_default", "isLoading", "expandedSpecies", "setExpandedSpecies", "useState", "INITIAL_EXPANDED_STATE", "handleCardClick", "useCallback", "species", "familyName", "allSpotted", "f", "s", "currentIndex", "handleNavigation", "direction", "prev", "newIndex", "family", "handleClose", "handlePrev", "handleNext", "renderFamilySection", "React", "FamilyCard", "SpeciesCard", "BirdDashboard_default", "_", "familyIndex", "FamilySkeleton", "speciesIndex", "SpeciesSkeleton", "getTrackerTitle", "ExpandedImage_default", "NotFound", "React", "App", "Routes", "Route", "BirdDashboard_default", "rootElement", "root", "ReactDOM", "HashRouter"]
}
